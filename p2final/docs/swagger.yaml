basePath: /
definitions:
  dto.BookCarRequest:
    properties:
      car_id:
        type: integer
    required:
    - car_id
    type: object
  dto.BookingResponse:
    properties:
      car_id:
        type: integer
      car_name:
        type: string
      category:
        type: string
      cost:
        type: integer
      rental_id:
        type: integer
      rented_at:
        type: string
      your_balance:
        type: integer
    type: object
  dto.CreateCarRequest:
    properties:
      category:
        type: string
      code:
        type: string
      name:
        type: string
      rental_cost:
        type: integer
    required:
    - category
    - code
    - name
    - rental_cost
    type: object
  dto.CreateCarResponse:
    properties:
      category:
        type: string
      code:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.DeletedCarResponse:
    properties:
      code:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  dto.GetCarResponse:
    properties:
      category:
        type: string
      code:
        type: string
      id:
        type: integer
      is_available:
        type: boolean
      name:
        type: string
      rental_cost:
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.MeResponse:
    properties:
      balance:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RentalHistoryResponse:
    properties:
      car_name:
        type: string
      cost:
        type: integer
      id:
        type: integer
      rented_at:
        type: string
      return_at:
        type: string
    type: object
  dto.ReturnCarRequest:
    properties:
      rental_id:
        type: integer
    required:
    - rental_id
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  dto.TopUpRequest:
    properties:
      amount:
        type: integer
    required:
    - amount
    type: object
  dto.TopupResponse:
    properties:
      balance:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  dto.TransactionResponse:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      receiver:
        $ref: '#/definitions/dto.TransactionUserInfo'
      rental_id:
        type: integer
      sender:
        $ref: '#/definitions/dto.TransactionUserInfo'
    type: object
  dto.TransactionUserInfo:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: fabuzard123@gmail.com
    name: Fahreza Abuzard Alghifary
  description: Final Project Phase 2 - Car Rental System API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Car Rental API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with name, email, and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /bookings:
    post:
      consumes:
      - application/json
      description: Allows a user to book a car by ID
      parameters:
      - description: Car ID to book
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BookCarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Book a car
      tags:
      - bookings
  /bookings/return:
    post:
      description: Allows a user to return a previously rented car by Rental ID
      parameters:
      - description: Return payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ReturnCarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Return a rented car
      tags:
      - bookings
  /cars:
    post:
      consumes:
      - application/json
      description: Allows a user to register a new car for rent
      parameters:
      - description: Car details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateCarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register a new car
      tags:
      - cars
  /cars/{id}:
    delete:
      description: Deletes a car owned by the authenticated user
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeletedCarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a car
      tags:
      - cars
  /cars/available:
    get:
      description: Lists all available cars for rent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetCarResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get available cars
      tags:
      - cars
  /cars/mine:
    get:
      description: Lists all cars owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetCarResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get my cars
      tags:
      - cars
  /users/me:
    get:
      description: Retrieve the authenticated user's profile and balance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - users
  /users/rentalhistory:
    get:
      description: Retrieves the authenticated user's car rental history
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.RentalHistoryResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user's rental history
      tags:
      - rentals
  /users/topup:
    post:
      consumes:
      - application/json
      description: Add balance to the authenticated user's account
      parameters:
      - description: Top up amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TopUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TopupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Top up user balance
      tags:
      - users
  /users/transactionhistory:
    get:
      description: Retrieves the authenticated user's transaction history
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.TransactionResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get transaction history
      tags:
      - transactions
swagger: "2.0"
